{"mappings":"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","sources":["src/main.ts"],"sourcesContent":["import { EventDispatcher } from '@pdw.io/event-dispatcher';\nimport { debounce } from 'lodash-es';\n\nexport enum ViewportEventName {\n  RESIZE,\n  SCROLL,\n}\n\nenum ViewportDimensionProperty {\n  WIDTH,\n  HEIGHT,\n  PIXEL_DENSITY,\n}\n\nenum ViewportVisibleAreaProperty {\n  X,\n  Y,\n  WIDTH,\n  HEIGHT,\n  SCALE,\n}\n\nclass Viewport extends EventDispatcher<ViewportEventName> {\n  /** Canvas dimensions. [width, height, pixelDensity, scale]. */\n  readonly dimensions = new Float32Array([320, 150, 1, 1]);\n  /** Rect currently visible in the viewport. [x, y, width, height, scale]. */\n  readonly visibleArea = new Float32Array([0, 0, 320, 150, 1]);\n  isListening = false;\n  /** Maximum allowed pixel density. */\n  maxPixelDensity = 2;\n  /** Debounce time before resize callback triggers. */\n  resizeDebounce = 200;\n\n  get width() {\n    return this.dimensions[ViewportDimensionProperty.WIDTH];\n  }\n\n  get height() {\n    return this.dimensions[ViewportDimensionProperty.HEIGHT];\n  }\n\n  get pixelDensity() {\n    return this.dimensions[ViewportDimensionProperty.PIXEL_DENSITY];\n  }\n\n  get aspect() {\n    return this.width / this.height;\n  }\n\n  get visualX() {\n    return this.visibleArea[ViewportVisibleAreaProperty.X];\n  }\n\n  get visualY() {\n    return this.visibleArea[ViewportVisibleAreaProperty.Y];\n  }\n\n  get visualWidth() {\n    return this.visibleArea[ViewportVisibleAreaProperty.WIDTH];\n  }\n\n  get visualHeight() {\n    return this.visibleArea[ViewportVisibleAreaProperty.HEIGHT];\n  }\n\n  get zoom() {\n    return this.visibleArea[ViewportVisibleAreaProperty.SCALE];\n  }\n\n  private readonly onResize = () => this.resizeDebounced();\n\n  private readonly onViewportScroll = () => {\n    this.calculateVisualArea();\n    this.dispatchEvent(ViewportEventName.SCROLL);\n  };\n\n  private calculateVisualArea() {\n    const {\n      offsetLeft,\n      offsetTop,\n      width,\n      height,\n      scale\n    } = window.visualViewport;\n\n    const y = height - window.innerHeight + offsetTop;\n    this.visibleArea[ViewportVisibleAreaProperty.X] = offsetLeft;\n    this.visibleArea[ViewportVisibleAreaProperty.Y] = y;\n    this.visibleArea[ViewportVisibleAreaProperty.WIDTH] = width;\n    this.visibleArea[ViewportVisibleAreaProperty.HEIGHT] = height;\n    this.visibleArea[ViewportVisibleAreaProperty.SCALE] = scale;\n  }\n\n  readonly resize = (\n    width = window.innerWidth,\n    height = window.innerHeight,\n    pixelDensity = window.devicePixelRatio\n  ) => {\n    const _pixelDensity = Math.min(pixelDensity, this.maxPixelDensity);\n    this.dimensions[ViewportDimensionProperty.WIDTH] = width;\n    this.dimensions[ViewportDimensionProperty.HEIGHT] = height;\n    this.dimensions[ViewportDimensionProperty.PIXEL_DENSITY] =\n      _pixelDensity;\n\n    this.calculateVisualArea();\n\n    this.dispatchEvent(ViewportEventName.RESIZE);\n  };\n\n  private readonly resizeDebounced = debounce(this.resize, this.resizeDebounce);\n\n  addEventListeners() {\n    if (this.isListening) return;\n    this.isListening = true;\n    window.addEventListener('resize', this.onResize);\n    window.addEventListener('visibilitychange', this.onResize);\n    window.visualViewport.addEventListener('resize', this.onResize);\n    window.visualViewport.addEventListener('scroll', this.onViewportScroll);\n  }\n\n  removeEventListeners() {\n    if (!this.isListening) return;\n    this.isListening = false;\n    window.removeEventListener('resize', this.onResize);\n    window.removeEventListener('visibilitychange', this.onResize);\n    window.visualViewport.removeEventListener('resize', this.onResize);\n    window.visualViewport.removeEventListener('scroll', this.onViewportScroll);\n  }\n\n  initialise() {\n    this.addEventListeners();\n    this.resize();\n  }\n\n  dispose() {\n    this.removeEventListeners();\n  }\n}\n\nexport { Viewport };\n"],"names":[],"version":3,"file":"viewport.js.map"}