{"mappings":";AAGA;IACE,MAAM,IAAA;IACN,MAAM,IAAA;CACP;AAgBD,6BAAuB,SAAQ,gBAAgB,yBAAyB,CAAC;IACvE,+DAA+D;IAC/D,QAAQ,CAAC,UAAU,eAAsC;IACzD,4EAA4E;IAC5E,QAAQ,CAAC,WAAW,eAAyC;IAC7D,WAAW,UAAS;IACpB,qCAAqC;IACrC,eAAe,SAAK;IACpB,qDAAqD;IACrD,cAAc,SAAO;IAErB,IAAI,KAAK,WAER;IAED,IAAI,MAAM,WAET;IAED,IAAI,YAAY,WAEf;IAED,IAAI,MAAM,WAET;IAED,IAAI,OAAO,WAEV;IAED,IAAI,OAAO,WAEV;IAED,IAAI,WAAW,WAEd;IAED,IAAI,YAAY,WAEf;IAED,IAAI,IAAI,WAEP;IA0BD,QAAQ,CAAC,MAAM,mEAcb;IAIF,iBAAiB;IASjB,oBAAoB;IASpB,UAAU;IAKV,OAAO;CAGR","sources":["src/src/main.ts","src/main.ts"],"sourcesContent":[null,"import { EventDispatcher } from '@pdw.io/eventdispatcher';\nimport { debounce } from 'lodash-es';\n\nexport enum ViewportObserverEventName {\n  RESIZE,\n  SCROLL,\n}\n\nenum ViewportObserverDimensionProperty {\n  WIDTH,\n  HEIGHT,\n  PIXEL_DENSITY,\n}\n\nenum ViewportObserverVisibleAreaProperty {\n  X,\n  Y,\n  WIDTH,\n  HEIGHT,\n  SCALE,\n}\n\nclass ViewportObserver extends EventDispatcher<ViewportObserverEventName> {\n  /** Canvas dimensions. [width, height, pixelDensity, scale]. */\n  readonly dimensions = new Float32Array([320, 150, 1, 1]);\n  /** Rect currently visible in the viewport. [x, y, width, height, scale]. */\n  readonly visibleArea = new Float32Array([0, 0, 320, 150, 1]);\n  isListening = false;\n  /** Maximum allowed pixel density. */\n  maxPixelDensity = 2;\n  /** Debounce time before resize callback triggers. */\n  resizeDebounce = 200;\n\n  get width() {\n    return this.dimensions[ViewportObserverDimensionProperty.WIDTH];\n  }\n\n  get height() {\n    return this.dimensions[ViewportObserverDimensionProperty.HEIGHT];\n  }\n\n  get pixelDensity() {\n    return this.dimensions[ViewportObserverDimensionProperty.PIXEL_DENSITY];\n  }\n\n  get aspect() {\n    return this.width / this.height;\n  }\n\n  get visualX() {\n    return this.visibleArea[ViewportObserverVisibleAreaProperty.X];\n  }\n\n  get visualY() {\n    return this.visibleArea[ViewportObserverVisibleAreaProperty.Y];\n  }\n\n  get visualWidth() {\n    return this.visibleArea[ViewportObserverVisibleAreaProperty.WIDTH];\n  }\n\n  get visualHeight() {\n    return this.visibleArea[ViewportObserverVisibleAreaProperty.HEIGHT];\n  }\n\n  get zoom() {\n    return this.visibleArea[ViewportObserverVisibleAreaProperty.SCALE];\n  }\n\n  private readonly onResize = () => this.resizeDebounced();\n\n  private readonly onViewportScroll = () => {\n    this.calculateVisualArea();\n    this.dispatchEvent(ViewportObserverEventName.SCROLL);\n  };\n\n  private calculateVisualArea() {\n    const {\n      offsetLeft,\n      offsetTop,\n      width,\n      height,\n      scale\n    } = window.visualViewport;\n\n    const y = height - window.innerHeight + offsetTop;\n    this.visibleArea[ViewportObserverVisibleAreaProperty.X] = offsetLeft;\n    this.visibleArea[ViewportObserverVisibleAreaProperty.Y] = y;\n    this.visibleArea[ViewportObserverVisibleAreaProperty.WIDTH] = width;\n    this.visibleArea[ViewportObserverVisibleAreaProperty.HEIGHT] = height;\n    this.visibleArea[ViewportObserverVisibleAreaProperty.SCALE] = scale;\n  }\n\n  readonly resize = (\n    width = window.innerWidth,\n    height = window.innerHeight,\n    pixelDensity = window.devicePixelRatio\n  ) => {\n    const _pixelDensity = Math.min(pixelDensity, this.maxPixelDensity);\n    this.dimensions[ViewportObserverDimensionProperty.WIDTH] = width;\n    this.dimensions[ViewportObserverDimensionProperty.HEIGHT] = height;\n    this.dimensions[ViewportObserverDimensionProperty.PIXEL_DENSITY] =\n      _pixelDensity;\n\n    this.calculateVisualArea();\n\n    this.dispatchEvent(ViewportObserverEventName.RESIZE);\n  };\n\n  private readonly resizeDebounced = debounce(this.resize, this.resizeDebounce);\n\n  addEventListeners() {\n    if (this.isListening) return;\n    this.isListening = true;\n    window.addEventListener('resize', this.onResize);\n    window.addEventListener('visibilitychange', this.onResize);\n    window.visualViewport.addEventListener('resize', this.onResize);\n    window.visualViewport.addEventListener('scroll', this.onViewportScroll);\n  }\n\n  removeEventListeners() {\n    if (!this.isListening) return;\n    this.isListening = false;\n    window.removeEventListener('resize', this.onResize);\n    window.removeEventListener('visibilitychange', this.onResize);\n    window.visualViewport.removeEventListener('resize', this.onResize);\n    window.visualViewport.removeEventListener('scroll', this.onViewportScroll);\n  }\n\n  initialise() {\n    this.addEventListeners();\n    this.resize();\n  }\n\n  dispose() {\n    this.removeEventListeners();\n  }\n}\n\nexport { ViewportObserver };\n"],"names":[],"version":3,"file":"viewport.d.ts.map"}